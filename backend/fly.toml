# fly.toml app configuration file generated for virtual-space
# See https://fly.io/docs/reference/configuration/ for information about how to use this file.

app = "virtual-space"
primary_region = "ord"

[build]
  dockerfile = "Dockerfile"

[env]
  PORT = "8000"
  PYTHONUNBUFFERED = "1"
  PYTHONDONTWRITEBYTECODE = "1"

[http_service]
  internal_port = 8000
  force_https = true
  auto_stop_machines = true
  auto_start_machines = true
  min_machines_running = 1
  processes = ["app"]

  [http_service.concurrency]
    type = "connections"
    hard_limit = 25
    soft_limit = 20

[[services]]
  protocol = "tcp"
  internal_port = 8000
  processes = ["app"]

  [[services.ports]]
    port = 80
    handlers = ["http"]
    force_https = true

  [[services.ports]]
    port = 443
    handlers = ["tls", "http"]

  [services.concurrency]
    type = "connections"
    hard_limit = 25
    soft_limit = 20

# Main FastAPI application
[processes]
  app = "sh -c 'python setup_database.py && alembic upgrade head && uvicorn app.main:app --host 0.0.0.0 --port 8000'"
  worker = "celery -A app.celery_app worker --loglevel=info --concurrency=2"
  beat = "celery -A app.celery_app beat --loglevel=info"

# Resource allocation for different processes
[[vm]]
  processes = ["app"]
  cpu_kind = "shared"
  cpus = 1
  memory_mb = 512

[[vm]]
  processes = ["worker"]
  cpu_kind = "shared" 
  cpus = 1
  memory_mb = 256

[[vm]]
  processes = ["beat"]
  cpu_kind = "shared"
  cpus = 1
  memory_mb = 128

# Persistent storage for uploads
[mounts]
  source = "virtual_space_uploads"
  destination = "/app/uploads"
  processes = ["app", "worker"]

# Redis as a separate service
[[services]]
  protocol = "tcp"
  internal_port = 6379
  processes = ["redis"]

# Redis process configuration
[processes.redis]
  cmd = "redis-server --appendonly yes --bind 0.0.0.0 --port 6379"

# Health checks
[checks]
  [checks.web]
    grace_period = "10s"
    interval = "30s"
    method = "GET"
    path = "/health"
    port = 8000
    protocol = "http"
    timeout = "5s"
    type = "http"
    processes = ["app"]

  [checks.redis]
    grace_period = "5s" 
    interval = "15s"
    port = 6379
    protocol = "tcp"
    timeout = "3s"
    type = "tcp"
    processes = ["redis"]

# Restart policy
[restart]
  policy = "on-failure"
  max_restarts = 10